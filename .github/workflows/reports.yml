name: Generate Reports

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# Permissions needed for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  generate-reports:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: "3.13"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[test,testing]
        
    - name: Generate coverage report
      run: |
        pytest tests/ --cov=pure3270 --cov-report=html --cov-report=xml --cov-report=term
        
    - name: Generate coverage badge
      run: |
        # Extract coverage percentage from XML report
        if [ -f coverage.xml ]; then
          coverage_percent=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); line_rate = float(tree.getroot().get('line-rate', 0.0)); print(int(line_rate * 100))")
        else
          coverage_percent=0
        fi
        
        # Ensure coverage_percent is a valid number
        if ! [[ "$coverage_percent" =~ ^[0-9]+$ ]]; then
          coverage_percent=0
        fi
        
        # Determine badge color based on coverage
        if [ "$coverage_percent" -ge 90 ]; then
          color="brightgreen"
        elif [ "$coverage_percent" -ge 75 ]; then
          color="yellow"
        else
          color="red"
        fi
        
        echo "Coverage: ${coverage_percent}%"
        
        # Create coverage badge markdown file
        echo "# Coverage Badge" > coverage-badge.md
        echo "" >> coverage-badge.md
        echo "![Coverage](https://img.shields.io/badge/coverage-${coverage_percent}%25-${color})" >> coverage-badge.md
        echo "" >> coverage-badge.md
        echo "Current coverage: **${coverage_percent}%**" >> coverage-badge.md
        
    - name: Generate static analysis reports
      run: |
        # Install static analysis tools if not already installed
        pip install mypy bandit pylint
        
        # Generate mypy report
        python -m mypy pure3270/ > mypy-report.txt 2>&1 || true
        
        # Generate bandit report
        python -m bandit -r pure3270/ -c .bandit > bandit-report.txt 2>&1 || true
        
        # Generate pylint report
        python -m pylint pure3270/ > pylint-report.txt 2>&1 || true
        
    - name: Generate linting report
      run: |
        # Install linting tools if not already installed
        pip install flake8 black
        
        # Generate flake8 report
        flake8 . > flake8-report.txt 2>&1 || true
        
        # Generate black report
        black --check . > black-report.txt 2>&1 || true
        
    - name: Archive coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          htmlcov/
          coverage.xml
          coverage-badge.md
        if-no-files-found: ignore
        
    - name: Archive static analysis reports
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-reports
        path: |
          mypy-report.txt
          bandit-report.txt
          pylint-report.txt
        if-no-files-found: ignore
        
    - name: Archive linting reports
      uses: actions/upload-artifact@v4
      with:
        name: linting-reports
        path: |
          flake8-report.txt
          black-report.txt
        if-no-files-found: ignore
        
    - name: Setup GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v5
      
    - name: Upload coverage report to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v4
      with:
        path: htmlcov/
        
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      id: deployment
      uses: actions/deploy-pages@v4