name: Copilot Regression Analysis

on:
  issues:
    types: [opened, reopened]
  issue_comment:
    types: [created]

jobs:
  analyze-regression:
    runs-on: ubuntu-latest
    steps:
    - name: Determine event and labels
      id: label_check
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const eventName = context.event_name;
          const issue = context.payload.issue || (context.payload.comment && context.payload.comment.issue);
          if (!issue) {
            core.setOutput('should_run', 'false');
            return;
          }
          const labels = issue.labels ? issue.labels.map(l => l.name) : [];
          const hasRegression = labels.includes('regression');
          if (hasRegression) {
            core.setOutput('should_run', 'true');
          } else {
            core.setOutput('should_run', 'false');
          }

    - name: Check if comment is for Copilot
      id: check_comment
      if: github.event_name == 'issue_comment'
      run: |
        if echo "${{ github.event.comment.body }}" | grep -q "@copilot\[analyze\]\|@github-actions\[bot\]"; then
          echo "analyze=true" >> $GITHUB_OUTPUT
        else
          echo "analyze=false" >> $GITHUB_OUTPUT
        fi

    - name: Analyze with Copilot
      # Allow an explicit @copilot[analyze] comment to trigger analysis even if the issue lacks the 'regression' label.
      # Logic: run when the issue has the regression label OR when this is an issue_comment with analyze=true.
      if: (steps.label_check.outputs.should_run == 'true') || (github.event_name == 'issue_comment' && steps.check_comment.outputs.analyze == 'true')
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = context.payload.issue || context.payload.comment.issue;
          const issueBody = issue.body;
          
          // Extract Python version from issue title
          const pythonVersionMatch = issue.title.match(/Python ([0-9.]+)/);
          const pythonVersion = pythonVersionMatch ? pythonVersionMatch[1] : 'unknown';
          
          const analysisComment = `
          @github-actions[bot] Analyzing Python ${pythonVersion} regression...
          
          ## Automated Analysis
          
          Based on the test failures, here are potential areas to investigate:
          
          1. **Syntax Compatibility**: Check for newer Python syntax that may not be backward compatible
          2. **Standard Library Changes**: Review for deprecated or modified stdlib functions
          3. **Asyncio Updates**: Verify async behavior changes in Python ${pythonVersion}
          4. **Type Hinting**: Check for typing module changes
          5. **String/Unicode Handling**: Review text processing changes
          
          ## Suggested Investigation Steps
          
          @copilot[task] Please provide specific code changes to fix the compatibility issues with Python ${pythonVersion}. Focus on:
          
          1. Identifying the exact lines of code causing failures
          2. Suggesting Python version-compatible alternatives
          3. Providing code examples for the fixes
          4. Recommending testing approaches to verify the fixes
          
          ## Common Python Version Upgrade Issues
          
          For Python ${pythonVersion}, typical issues include:
          - [Insert common issues for this Python version based on release notes]
          
          Please provide detailed analysis and suggested fixes.
          `;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.number,
            body: analysisComment
          });