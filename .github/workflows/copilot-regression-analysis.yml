name: Copilot Regression Analysis

permissions:
  contents: read
  issues: write

on:
  push:
    branches: [ main ]
  issues:
    types: [opened, reopened, labeled]
  issue_comment:
    types: [created]
  workflow_dispatch:

jobs:
  analyze-regression:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine event and labels
      id: label_check
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const eventName = context.event_name;
          const issue = context.payload.issue || (context.payload.comment && context.payload.comment.issue);
          if (!issue) {
            core.setOutput('should_run', 'false');
            return;
          }
          const labels = issue.labels ? issue.labels.map(l => l.name) : [];
          const hasRegression = labels.includes('regression');
          if (hasRegression || eventName === 'workflow_dispatch') {
            core.setOutput('should_run', 'true');
          } else {
            core.setOutput('should_run', 'false');
          }

    - name: Check if comment is for Copilot
      id: check_comment
      if: github.event_name == 'issue_comment'
      run: |
        if echo "${{ github.event.comment.body }}" | grep -q "@copilot\[analyze\]\|@github-actions\[bot\]"; then
          echo "analyze=true" >> $GITHUB_OUTPUT
        else
          echo "analyze=false" >> $GITHUB_OUTPUT
        fi

    - name: Try assign copilot
      id: try_assign
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const core = require('@actions/core');
          const assignee = 'copilot';
          const issueNumber = (context.payload.issue && context.payload.issue.number) || (context.payload.comment && context.payload.comment.issue && context.payload.comment.issue.number) || null;
          if (!issueNumber) {
            core.info('No issue number in payload; skipping assignee step.');
            return;
          }

          try {
            await github.rest.users.getByUsername({ username: assignee });
          } catch (err) {
            core.warning(`User ${assignee} not found (${err.status}). Adding comment and continuing.`);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `Attempted to assign @${assignee} but the GitHub user was not found. Proceeding without assignment.`
            });
            return;
          }

          try {
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              assignees: [assignee]
            });
            core.info(`Assigned ${assignee} to issue #${issueNumber}`);
          } catch (err) {
            core.warning(`Failed to assign ${assignee}: ${err.message}. Posting comment and continuing.`);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `Attempt to assign @${assignee} failed: ${err.message}. Proceeding with the workflow.`
            });
          }

    - name: Analyze with Copilot
      if: steps.label_check.outputs.should_run == 'true' || steps.check_comment.outputs.analyze == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const core = require('@actions/core');
          const issue = context.payload.issue || context.payload.comment.issue;
          const issueBody = issue.body;

          const pythonVersionMatch = issue.title.match(/Python ([0-9.]+)/);
          const pythonVersion = pythonVersionMatch ? pythonVersionMatch[1] : 'unknown';

          const analysisComment = `
## Automated Copilot Analysis for Python ${pythonVersion} Regression

Please analyze this issue and provide:

1. **Root Cause**: Specific Python ${pythonVersion} changes causing the failure
2. **Code Fixes**: Exact code changes with examples
3. **Test Strategy**: How to verify compatibility across versions
4. **Risk Assessment**: Potential side effects of changes
5. **Priority Files**: Which modules need updates first

Focus on syntax, stdlib, asyncio, typing, and encoding changes.`;

          try {
            const resp = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: analysisComment
            });
            core.info(`createComment response: status=${resp.status}`);
          } catch (err) {
            core.error(`createComment failed: ${err.message}`);
            core.warning('Proceeding despite comment-post failure so workflow does not block.');
          }

jobs:
  analyze-regression:
    permissions:
      contents: read
      issues: write
    runs-on: ubuntu-latest
    steps:
    - name: Determine event and labels
      id: label_check
      uses: actions/github-script@v7
      with:
        if: github.event_name == 'issues' || steps.check_comment.outputs.analyze == 'true'
        uses: actions/github-script@v7
          const eventName = context.event_name;
          const issue = context.payload.issue || (context.payload.comment && context.payload.comment.issue);
          if (!issue) {
            core.setOutput('should_run', 'false');
            return;
          }
          const labels = issue.labels ? issue.labels.map(l => l.name) : [];
          const hasRegression = labels.includes('regression');
          if (hasRegression) {
            core.setOutput('should_run', 'true');
          } else {
            core.setOutput('should_run', 'false');
          }

    - name: Check if comment is for Copilot
      id: check_comment
      if: github.event_name == 'issue_comment'
      run: |
        if echo "${{ github.event.comment.body }}" | grep -q "@copilot\[analyze\]\|@github-actions\[bot\]"; then
          echo "analyze=true" >> $GITHUB_OUTPUT
        else
          echo "analyze=false" >> $GITHUB_OUTPUT
        fi

      - name: Try assign copilot
        id: try_assign
        uses: actions/github-script@v6
        with:
          script: |
            const core = require('@actions/core');
            const assignee = 'copilot';
            // Determine issue number from payload
            const issueNumber = (context.payload.issue && context.payload.issue.number) || (context.payload.comment && context.payload.comment.issue && context.payload.comment.issue.number) || null;
            if (!issueNumber) {
              core.info('No issue number in payload; skipping assignee step.');
              return;
            }

            // Check if user exists
            try {
              await github.rest.users.getByUsername({ username: assignee });
            } catch (err) {
              core.warning(`User ${assignee} not found (${err.status}). Adding comment and continuing.`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `Attempted to assign @${assignee} but the GitHub user was not found. Proceeding without assignment.`
              });
              return;
            }

            // Try to add the assignee
            try {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                assignees: [assignee]
              });
              core.info(`Assigned ${assignee} to issue #${issueNumber}`);
            } catch (err) {
              core.warning(`Failed to assign ${assignee}: ${err.message}. Posting comment and continuing.`);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `Attempt to assign @${assignee} failed: ${err.message}. Proceeding with the workflow.`
              });
            }

    - name: Analyze with Copilot
      if: steps.label_check.outputs.should_run == 'true' || steps.check_comment.outputs.analyze == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const core = require('@actions/core');
          const issue = context.payload.issue || context.payload.comment.issue;
          const issueBody = issue.body;

          const pythonVersionMatch = issue.title.match(/Python ([0-9.]+)/);
          const pythonVersion = pythonVersionMatch ? pythonVersionMatch[1] : 'unknown';

          const analysisComment = "## Automated Copilot Analysis for Python " + pythonVersion + " Regression\\n\\nPlease analyze this issue and provide:\\n\\n1. **Root Cause**: Specific Python " + pythonVersion + " changes causing the failure\\n2. **Code Fixes**: Exact code changes with examples\\n3. **Test Strategy**: How to verify compatibility across versions\\n4. **Risk Assessment**: Potential side effects of changes\\n5. **Priority Files**: Which modules need updates first\\n\\nFocus on syntax, stdlib, asyncio, typing, and encoding changes.";

          try {
            const resp = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: analysisComment
            });
            core.info(`createComment response: status=${resp.status}`);
          } catch (err) {
            core.error(`createComment failed: ${err.message}`);
            core.warning('Proceeding despite comment-post failure so workflow does not block.');
          }
