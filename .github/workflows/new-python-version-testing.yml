name: New Python Version Testing

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to test (e.g., "3.14")'
        required: true
        type: string
      test_type:
        description: 'Type of testing to perform'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - basic
        - integration-only
      create_issue:
        description: 'Create issue with test results'
        required: false
        default: true
        type: boolean
      enable_copilot_fixes:
        description: 'Automatically create Copilot PR for fixing failures'
        required: false
        default: true
        type: boolean

jobs:
  test-new-python-version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ github.event.inputs.python_version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ github.event.inputs.python_version }}
        allow-prereleases: true  # Allow testing of prerelease Python versions

    - name: Display environment info
      run: |
        echo "üêç Testing pure3270 compatibility with Python ${{ github.event.inputs.python_version }}"
        echo "üìã Test type: ${{ github.event.inputs.test_type }}"
        python --version
        python -c "import sys; print(f'Python executable: {sys.executable}')"
        pip --version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e '.[test]' || {
          echo "‚ö†Ô∏è Failed to install with test extras, trying basic installation"
          pip install -e .
          pip install pytest pytest-asyncio || echo "‚ö†Ô∏è Could not install test dependencies"
        }

    - name: List installed packages
      run: |
        echo "üì¶ Installed packages:"
        pip list

    - name: Run basic tests
      if: github.event.inputs.test_type == 'basic' || github.event.inputs.test_type == 'full'
      run: |
        echo "üß™ Running basic unit tests..."
        pytest tests/ -v --tb=short -m "not integration" || {
          echo "‚ùå Basic tests failed"
          exit 1
        }

    - name: Run integration tests
      if: github.event.inputs.test_type == 'integration-only' || github.event.inputs.test_type == 'full'
      run: |
        echo "üîó Running integration tests..."
        pytest integration_test.py -v --tb=short || {
          echo "‚ùå Integration tests failed"
          exit 1
        }

    - name: Run static analysis
      if: github.event.inputs.test_type == 'full'
      continue-on-error: true  # Don't fail the workflow if static analysis has issues
      run: |
        echo "üîç Running static analysis..."
        mypy pure3270/ || echo "‚ö†Ô∏è MyPy found issues"
        pylint pure3270/ || echo "‚ö†Ô∏è Pylint found issues"
        flake8 pure3270/ || echo "‚ö†Ô∏è Flake8 found issues"

    - name: Test core functionality
      run: |
        echo "‚ö° Testing core pure3270 functionality..."
        python -c "
        try:
            import pure3270
            print('‚úÖ Import successful')

            session = pure3270.Session()
            print('‚úÖ Session creation successful')

            # Test basic session methods
            assert hasattr(session, 'connect'), 'Missing connect method'
            assert hasattr(session, 'send'), 'Missing send method'
            assert hasattr(session, 'read'), 'Missing read method'
            assert hasattr(session, 'close'), 'Missing close method'
            print('‚úÖ Core methods available')

            session.close()
            print('‚úÖ Session cleanup successful')

            print('üéâ Python ${{ github.event.inputs.python_version }} compatibility test PASSED')
        except Exception as e:
            print(f'‚ùå Core functionality test FAILED: {e}')
            exit(1)
        "

    - name: Generate test summary
      if: always()
      id: test_summary
      run: |
        echo "üìä Test Summary for Python ${{ github.event.inputs.python_version }}"
        echo "================================================"
        if [[ $? -eq 0 ]]; then
          echo "‚úÖ Overall Result: SUCCESS"
          echo "pure3270 is compatible with Python ${{ github.event.inputs.python_version }}"
          echo "test_status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Overall Result: FAILURE"
          echo "pure3270 has compatibility issues with Python ${{ github.event.inputs.python_version }}"
          echo "test_status=failure" >> $GITHUB_OUTPUT
        fi
        echo "================================================"

    - name: Trigger Copilot fixes for failures
      if: github.event.inputs.enable_copilot_fixes == 'true' && steps.test_summary.outputs.test_status == 'failure'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "ü§ñ Triggering GitHub Copilot to fix Python ${{ github.event.inputs.python_version }} compatibility issues..."

        # Create a comprehensive Copilot task using gh api
        COPILOT_BODY="## Automated Fix Request

        GitHub Copilot has been requested to fix compatibility issues with Python ${{ github.event.inputs.python_version }}.

        ### Issue Context
        - **Python Version:** ${{ github.event.inputs.python_version }}
        - **Test Type:** ${{ github.event.inputs.test_type }}
        - **Failed Workflow:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

        ### Requested Actions
        Please analyze and fix:

        1. **Import compatibility**: Update imports incompatible with Python ${{ github.event.inputs.python_version }}
        2. **Syntax updates**: Fix deprecated syntax or new requirements
        3. **Type annotations**: Update type hints for compatibility
        4. **Dependencies**: Update version constraints in pyproject.toml/setup.py
        5. **CI configuration**: Ensure proper Python ${{ github.event.inputs.python_version }} support

        ### Files Likely Needing Updates
        - pure3270/ package modules
        - pyproject.toml and setup.py dependency specifications
        - .github/workflows/ci.yml matrix configuration
        - Type annotations requiring from __future__ import annotations

        ### Validation Requirements
        - All existing tests must pass
        - New Python ${{ github.event.inputs.python_version }} compatibility confirmed
        - Backward compatibility maintained
        - Code style consistency preserved

        #github-pull-request_copilot-coding-agent"

        gh api repos/${{ github.repository }}/pulls \
          --method POST \
          --field title="ü§ñ Fix Python ${{ github.event.inputs.python_version }} compatibility issues" \
          --field body="$COPILOT_BODY" \
          --field head="copilot/fix-python-${{ github.event.inputs.python_version }}" \
          --field base="main" \
          --field draft=true || {

          echo "‚ö†Ô∏è Direct PR creation failed, creating issue for Copilot instead..."

          ISSUE_BODY="## Automated Fix Request

          Please fix compatibility issues with Python ${{ github.event.inputs.python_version }}.

          **Test Failure Details:**
          - Failed workflow: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - Test type: ${{ github.event.inputs.test_type }}

          **Required Actions:**
          1. Fix import/syntax compatibility issues
          2. Update dependencies for Python ${{ github.event.inputs.python_version }}
          3. Update CI matrix configuration
          4. Ensure backward compatibility

          **Expected Outcome:**
          Pure3270 should work seamlessly with Python ${{ github.event.inputs.python_version }} while maintaining compatibility with other supported versions.

          #github-pull-request_copilot-coding-agent"

          gh issue create \
            --title "ü§ñ Copilot: Fix Python ${{ github.event.inputs.python_version }} compatibility" \
            --body "$ISSUE_BODY" \
            --label "copilot-task" \
            --label "python-compatibility" \
            --label "automated" \
            --assignee "@copilot"
        }

        echo "‚úÖ Copilot task created for Python ${{ github.event.inputs.python_version }} fixes"

    - name: Create compatibility issue
      if: github.event.inputs.create_issue == 'true' && always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [[ "${{ steps.test_summary.outputs.test_status }}" == "success" ]]; then
          TITLE="‚úÖ Python ${{ github.event.inputs.python_version }} Compatibility Confirmed"
          BODY_SUCCESS="üéâ SUCCESS: pure3270 is compatible with Python ${{ github.event.inputs.python_version }}

        Test Results:
        - ‚úÖ Core functionality tests passed
        - ‚úÖ Import and session creation successful
        - ‚úÖ Basic API methods available

        Test Details:
        - Python Version: ${{ github.event.inputs.python_version }}
        - Test Type: ${{ github.event.inputs.test_type }}
        - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

        Next Steps:
        - Consider adding Python ${{ github.event.inputs.python_version }} to the official testing matrix
        - Update project documentation to reflect compatibility
        - Monitor for any edge cases in real-world usage"
          BODY="$BODY_SUCCESS"
        else
          TITLE="‚ùå Python ${{ github.event.inputs.python_version }} Compatibility Issues"
          BODY_FAILURE="‚ö†Ô∏è FAILURE: pure3270 has compatibility issues with Python ${{ github.event.inputs.python_version }}

        Test Results:
        - ‚ùå Some tests failed or core functionality has issues
        - üîç Investigation required

        Test Details:
        - Python Version: ${{ github.event.inputs.python_version }}
        - Test Type: ${{ github.event.inputs.test_type }}
        - Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          if [[ "${{ github.event.inputs.enable_copilot_fixes }}" == "true" ]]; then
            COPILOT_INFO="

        Automated Fix Process:
        - ü§ñ Copilot Fix Triggered: GitHub Copilot will automatically create a PR with proposed fixes
        - ‚è±Ô∏è Expected Timeline: Fix PR should be available within 5-15 minutes
        - üìã Review Required: Please review and test the automated fixes before merging

        Next Steps:
        1. Wait for Copilot automated fix PR
        2. Review the proposed changes carefully
        3. Test the fixes in your environment
        4. Merge if satisfied, or provide feedback for iteration"
            BODY="$BODY_FAILURE$COPILOT_INFO"
          else
            MANUAL_INFO="

        Manual Fix Required:
        - üîß Manual Fix Required: Review test logs and update code manually
        - üìù Common Issues: Import changes, syntax updates, dependency versions

        Next Steps:
        1. Review test logs for specific failures
        2. Identify compatibility breaking changes in Python ${{ github.event.inputs.python_version }}
        3. Update code to address compatibility issues
        4. Re-run tests after fixes"
            BODY="$BODY_FAILURE$MANUAL_INFO"
          fi
        fi

        gh issue create --title "$TITLE" --body "$BODY" --label "python-compatibility" --assignee "@copilot"
